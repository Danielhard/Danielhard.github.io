(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{211:function(t,a,e){"use strict";e.r(a);var r=e(0),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"js数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" js数据类型")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("执行环境\n执行环境是js中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。")])]),t._v(" "),e("li",[e("p",[t._v("全局执行环境\n全局执行环境是最外围的一个执行环境。根据ECMAScript实现所在的宿主环境不同，表示执行环境的对象也不一样。在Web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出---例如关闭网页或浏览器时才会被销毁）。")])]),t._v(" "),e("li",[e("p",[t._v("函数执行环境\n每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript程序中的执行例句正式由这个方便的机制控制这。")])])]),t._v(" "),e("h2",{attrs:{id:"堆栈内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆栈内存","aria-hidden":"true"}},[t._v("#")]),t._v(" 堆栈内存")]),t._v(" "),e("p",[t._v("js中有两大内存：堆内存(heap)、栈内存(stack)")]),t._v(" "),e("p",[t._v("堆内存作用：用来存储内容的(对象存储的是键值对，函数存储的是代码字符串)")]),t._v(" "),e("p",[t._v("栈内存作用：也可以被成为作用域，是代码解析和执行的环境")]),t._v(" "),e("p",[t._v("堆栈内存的释放问题")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("堆内存：")]),t._v(" "),e("p",[t._v("堆内存的释放只要没有变量占用这个堆内存，浏览器就会在空闲的时候把它释放掉，所以在项目中我们尽可能把不被使用的堆内存手动释放掉。")])]),t._v(" "),e("li",[e("p",[t._v("栈内存：")]),t._v(" "),e("p",[t._v("函数执行会形成一个私有的占内存，一般函数执行完成，栈内存会自己释放，除非栈内存中存在某一个东西(例如：栈内存中开辟的堆内存)被栈内存意外的变量(或者是其他东西)占用了，此时的栈内存就不能被释放掉；全局作用域(栈内存)是在一开始加载js的时候诞生的，当前页面关闭的时候会自动释放掉。")])])]),t._v(" "),e("h2",{attrs:{id:"基础数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础数据类型")]),t._v(" "),e("p",[t._v("js中的基础数据类型，这些值都有固定的大小，往往都是保存在内存空间中，由系统自动分配存储空间。我们可以直接操作保存在栈内存空间的值，因此基础数据类型都是按值访问")]),t._v(" "),e("ul",[e("li",[t._v("基础数据类型：Number String Undefined Boolean")]),t._v(" "),e("li",[t._v("引用数据类型\n由于引用数据类型存储的值过于复杂(结构复杂即内容较多)，渲染引擎会开辟一个新的内存空间，单独来存储这些值，最后把内存空间引用地址赋值给对应的变量，后期所有的操作都是基于地址找到空间，然后对空间中的内容进行操作。")])]),t._v(" "),e("h2",{attrs:{id:"引用数据类型：object-array-date-regexp-math-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型：object-array-date-regexp-math-function","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用数据类型：Object Array Date RegExp Math Function")]),t._v(" "),e("ul",[e("li",[t._v("对象数据类型\n开辟一个内存空间(有一个16进制的地址)\n把对象中的属性名和属性值一次存储到内存空间中\n把内存空间的地址赋值给变量")]),t._v(" "),e("li",[t._v('函数数据类型\n开辟一个内存空间(有一个16进制的地址)\n把函数体中的代码当作"字符串"存储到内存空间中\n函数创建的时候都是无意义的字符串所以说函数只创建不执行是毫无意义的\n变量提升只对当前作用域下的var/function处理，主要原因是函数中存的都是字符串，我们看到的函数中的var/function此时还都是字符串呢\n当函数执行的时候，就是要把这堆字符串拿出来执行的\n把内存空间地址赋值给变量')])])])}),[],!1,null,null,null);a.default=n.exports}}]);