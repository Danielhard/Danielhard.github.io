(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{225:function(e,t,a){"use strict";a.r(t);var n=a(0),v=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"diff核心思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff核心思想","aria-hidden":"true"}},[e._v("#")]),e._v(" diff核心思想")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("DomDiff算法思想其实并不是特别难理解，自己手写代码时主要的难点出现在节点索引的追踪上，因为在addPatch( )阶段，需要将补丁包中的节点索引编号与旧的Virtual-DOM树对应起来，这里涉及的基础知识点有两个：")]),e._v(" "),a("p",[e._v("1.函数形参为对象类型时是传入对象引用的，在函数中修改对象属性是会影响到函数外部作用域的，而patches补丁包正是利用了这个基本特性，从顶层向下传递在最外层生成的patches对象引用，深度优先遍历时用于递归的函数有一个形参表示patches，这样在遍历时，无论遍历到哪一层，都是共享同一个patches的。")]),e._v(" "),a("p",[e._v("2.第二个难点在于节点索引追踪，比如第二层有3个节点，第一个被标号为2,同层第二个节点的编号取决于第一个节点的子节点消耗了多少个编号，所以代码中在dfswalk( )迭代函数中return了一个编号，向父级调用者传递的信息是：我和我所有的子级节点都已经遍历完了，最后一个节点（或者下一个可使用节点）的索引是XXX，这样遍历函数能够正确地标记和追踪节点的索引了，觉得这一部分不太好理解的读者可以自己手画一下深度优先遍历的过程就比较容易理解了。")])])]),e._v(" "),a("h2",{attrs:{id:"vue3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3-0","aria-hidden":"true"}},[e._v("#")]),e._v(" vue3.0")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("新旧节点从头对比找到有相同的节点patch,发现不同，立即跳出")])]),e._v(" "),a("li",[a("p",[e._v("如果第一步没有patch完，立即从后往前patch,发现不同立即跳出循环")])]),e._v(" "),a("li",[a("p",[e._v("如果新的节点大于老的节点数，对于剩下的节点全部以新的vnode处理(这种情况说明已经patch完相同的vnode);")])]),e._v(" "),a("li",[a("p",[e._v("对于老的节点大于新的节点的情况，对于超出的节点全部卸载(这种情况说明已经patch完相同的vnode)")])]),e._v(" "),a("li",[a("p",[e._v("不确定的元素(这种情况说明没有patch完相同的vnode)与3,4对立关系")]),e._v(" "),a("p",[e._v("1。把没有比较过的新的vnode节点，通过map保存，记录已经patch的新节点的数量patched没有经过patch新的节点的数量toBePatched，建立一个数组newIndexToOldIndexMap,每个子元素都是[0,0,0,0,0,]里面的数字记录老节点的索引，数组索引就是新节点的索引")]),e._v(" "),a("p",[e._v("开始遍历老节点\n1）如果toBePatched新的节点的数量为0，那么统一卸载老的节点\n2）如果，老节点的key存在，通过key找到对应新节点的index\n3) 如果老节点key不存在 ，遍历剩下新节点，如果找到与当前老节点对应的新节点，将新节点的索引赋值给newIndex\n4) 没有找到与当前老节点对应的新节点，卸载当前老节点\n5) 如果找到与老节点对应的 新节点，把老节点的索引，记录在存放新节点的数组中，如果节点发生移动，记录已经移动了，patch新老节点，找到新的节点进行patch节点\n遍历结束")]),e._v(" "),a("p",[e._v("如果发生移动\n1）根据newIndexToOldIndexMap新老节点索引列表找到最长稳定序列\n2）对于newIndexToOldIndexMap - item = 0证明不存在老节点，从新形成新的vnode\n3)对于发生移动的节点进行移动处理")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);