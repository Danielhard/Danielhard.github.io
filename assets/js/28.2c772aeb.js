(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{232:function(a,e,t){"use strict";t.r(e);var l=t(0),n=Object(l.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"mysql复杂查询语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql复杂查询语句","aria-hidden":"true"}},[a._v("#")]),a._v(" MySQL复杂查询语句")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("sql语句当中条件查询配合函数")]),a._v(" "),t("ol",[t("li",[a._v("查询数量 count() 函数")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" SELECT count(字段名称) FROM `table_name`  WHERE `condition`.\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("min函数(字段名称 不能为所有条件*) 求最小值")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" SELECT min(比如生日) FROM `table_name`  WHERE `condition`.\n\n SELECT min(i_name) , `table_name.*` \x3c!-- 使用函数并且还需查询表中其他字段  .*  固定格式--\x3e FROM `table_name`.\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[a._v("max函数求最大值。用法同上")]),a._v(" "),t("li",[a._v("sum() 求和")]),a._v(" "),t("li",[a._v("sqrt() 求平方根")]),a._v(" "),t("li",[a._v("rand() 随机数")]),a._v(" "),t("li",[a._v("now() 获得当前时间")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT now()\n")])])]),t("ol",{attrs:{start:"8"}},[t("li",[a._v("concat()拼接字符串函数"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT concat('AAA','BBB ')\n")])])])])])]),a._v(" "),t("li",[t("p",[a._v("where子句，条件查询")])])]),a._v(" "),t("ol",[t("li",[t("blockquote",[t("p",[a._v("=  <=")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" SELECT * FROM `table_name` WHERE `leter` <= ''  AND `leter` >= ''\n")])])])]),a._v(" "),t("li",[a._v("BETWEEN"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  SELECT * FROM `table_name` WHERE `leter` BETWEEN '' AND ''\n")])])])]),a._v(" "),t("li",[a._v("SQL 中 = 是完全匹配 , LIKE 关键字 'pattern leter %'  % 是通配符   (模糊查询)")])]),a._v(" "),t("pre",[t("code",[a._v(" ```\n   SELECT * FROM `table_name` WHERE name LIKE 'letter%'    -- 找出以什么字符开头\n   SELECT * FROM `table_name` WHERE name LIKE '%letter%'    -- 只要包字符就可以搜\n   SELECT * FROM `table_name` WHERE name LIKE '%letter'   -- 找出以什么字符结尾\n ```\n")])]),a._v(" "),t("ul",[t("li",[a._v("where 子句复杂查询\n"),t("ol",[t("li",[a._v("ORDER BY  排序"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" SELECT * FROM `table_name` ORDER BY `leter` DESC  (倒序)   -- 不添加DESC 默认为正序  (ASC 正序 可省略 )\n")])])])]),a._v(" "),t("li",[a._v("LEFT JOIN ON  左连接查询 关键字会从左表 (table_name1) 那里返回所有的行，即使在右表 (table_name2) 中没有匹配的行"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  SELECT   `tableA_name`.`tableA_letter`,`tableB_name`.`tableB_letter` FROM  `tableA_name` LEFT JOIN `tableB_name`  ON   `tableA`.id=`tableB`.parent_id  \n")])])])])])]),a._v(" "),t("li",[a._v("join 查询")])]),a._v(" "),t("pre",[t("code",[a._v("1. RIGHY JOIN ON 右连接查询  关键字会右表 (table_name2) 那里返回所有的行，即使在左表 (table_name1) 中没有匹配的行。\n   ``` \n    SELECT `column_name` FROM `tableA_name` RIGHT JOIN `tableb_name` ON `tableA`.id = `tableB`.parent_id\n   ```\n2. FULL JOIN  ON 全连接查询 只要其中某个表存在匹配，FULL JOIN 关键字就会返回行。\n   ```\n    SELECT `column_name` FROM `tableA_name` FULL JOIN `tableb_name` ON `tableA`.id = `tableB`.parent_id\n   ```\n3. INNER JOIN ON 内连接查询   在表中存在至少一个匹配时，INNER JOIN 关键字返回行\n  ```\n   SELECT `column_name` FROM `tableA_name` INNER JOIN `tableb_name` ON `tableA`.id = `tableB`.parent_id\n  ```\n\n+ Union操作符 UNION 操作符用于合并两个或多个 SELECT 语句的结果集，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。   同时，每条 SELECT 语句中的列的顺序必须相同。\n  ```\n    SELECT column_name(s) FROM table_name1\n    UNION\n    SELECT column_name(s) FROM table_name2\n  ```\n")])])])}),[],!1,null,null,null);e.default=n.exports}}]);