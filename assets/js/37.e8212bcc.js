(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{236:function(n,a,t){"use strict";t.r(a);var e=t(0),s=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"php面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#php面向对象","aria-hidden":"true"}},[n._v("#")]),n._v(" PHP面向对象")]),n._v(" "),t("h2",{attrs:{id:"先简单介绍oop-object-oriented-programming-面向对象编程，使编程代码更简洁。更易于维护。和具有更强的可重用性。oop达到了软件工程的三个目标：重用性、灵活性、拓展性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#先简单介绍oop-object-oriented-programming-面向对象编程，使编程代码更简洁。更易于维护。和具有更强的可重用性。oop达到了软件工程的三个目标：重用性、灵活性、拓展性","aria-hidden":"true"}},[n._v("#")]),n._v(" 先简单介绍OOP(Object-Oriented Programming)面向对象编程，使编程代码更简洁。更易于维护。和具有更强的可重用性。OOP达到了软件工程的三个目标：重用性、灵活性、拓展性")]),n._v(" "),t("h2",{attrs:{id:"oop面向对象编程的特点-封装、继承、多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oop面向对象编程的特点-封装、继承、多态","aria-hidden":"true"}},[n._v("#")]),n._v(" OOP面向对象编程的特点:封装、继承、多态")]),n._v(" "),t("h2",{attrs:{id:"内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[n._v("#")]),n._v(" 内容")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('  类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作\n\n  对象 − 是类的实例\n  \n  成员变量 − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性\n  \n  成员函数 − 定义在类的内部，可用于访问对象的数据\n  \n  继承 − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容\n  \n  父类 − 一个类被其他类继承，可将该类称为父类，或基类，或超类\n  \n  子类 − 一个类继承其他类称为子类，也可称为派生类\n  \n  多态 − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性\n  \n  重载 − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法\n  \n  抽象性 − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关\n  \n  封装 − 封装是把对象中的成员属性成员方法加上修饰符，使其尽可能隐藏对象的内部细节，以达到对成员的访问控制(不是拒绝访问)\n  \n  构造函数 − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中\n  \n  析构函数 − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做"清理、善后" 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）\n')])])]),t("h2",{attrs:{id:"类和对象之间的关系：-类是一个大的概念。对象是类里面具体到的某个实体。-两者间的关系。就是通过实例化一个类产出一个对象，-js-v8引擎中有个隐藏的类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类和对象之间的关系：-类是一个大的概念。对象是类里面具体到的某个实体。-两者间的关系。就是通过实例化一个类产出一个对象，-js-v8引擎中有个隐藏的类","aria-hidden":"true"}},[n._v("#")]),n._v(" 类和对象之间的关系： 类是一个大的概念。对象是类里面具体到的某个实体。 两者间的关系。就是通过实例化一个类产出一个对象，(js v8引擎中有个隐藏的类)")]),n._v(" "),t("h2",{attrs:{id:"面向对象的主要三个主要特征："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的主要三个主要特征：","aria-hidden":"true"}},[n._v("#")]),n._v(" 面向对象的主要三个主要特征：")]),n._v(" "),t("ul",[t("li",[n._v("对象的行为  (对象里面具体的方法)")]),n._v(" "),t("li",[n._v("对象的状态  (属性)")]),n._v(" "),t("li",[n._v("对象的标识  (可以理解为实例)")])]),n._v(" "),t("h2",{attrs:{id:"如何抽象一个类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何抽象一个类","aria-hidden":"true"}},[n._v("#")]),n._v(" 如何抽象一个类")]),n._v(" "),t("ul",[t("li",[n._v("类的声明")]),n._v(" "),t("li",[n._v("成员属性")]),n._v(" "),t("li",[n._v("成员方法")])]),n._v(" "),t("h2",{attrs:{id:"类的声明-php"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的声明-php","aria-hidden":"true"}},[n._v("#")]),n._v(" 类的声明 (php)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  <?php\n    class People {\n     // 公有成员属性\n      // public 修饰符\n      public $name = 'zhangsan';\n      public $age = 28;\n      // 公有成员函数方法\n      public function sayName () {\n        //业务逻辑 \n      }\n    }\n  ?>\n")])])]),t("h2",{attrs:{id:"对象中的成员访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象中的成员访问","aria-hidden":"true"}},[n._v("#")]),n._v(" 对象中的成员访问")]),n._v(" "),t("p",[t("strong",[n._v("语法")]),n._v("\n$引用名 = new 类名(构造参数);\n$引用名 ->成员属性=赋值;//对象属性赋值；\necho $引用名->成员属性;//输出对象属性；\n$引用名->成员方法(参数);//调用对象的方法;")]),n._v(" "),t("h2",{attrs:{id:"特殊对象引用-this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊对象引用-this","aria-hidden":"true"}},[n._v("#")]),n._v(" 特殊对象引用$this")]),n._v(" "),t("p",[n._v("特殊对象的引用$this")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public function play(){\n    echo "正在玩手机";\n}\npublic function info(){\n    $this -> play();\n    return "手机的宽度:{$this->width},手机的高度:{$this->height}";\n}\n')])])]),t("h2",{attrs:{id:"修饰符-访问控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰符-访问控制","aria-hidden":"true"}},[n._v("#")]),n._v(" 修饰符->访问控制")]),n._v(" "),t("ul",[t("li",[n._v("public(公有的 默认)")]),n._v(" "),t("li",[n._v("private (私有的)\n声明成员属性方法后,使用privare修饰实现对成员的私有封装，封装后的成员在对象外部不能直接访问，只能在对象的内部方法中使用$this访问")]),n._v(" "),t("li",[n._v("protected(受保护的)")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" <?php\n   /**\n   * 基类\n   * Define Person\n   */\n   class Person\n   {\n     //声明一个公有的构造函数\n     public function __construct (){}    \n     //声明一个公有的方法\n     public function say()\n     {\n        echo 'say';\n     }\n     // 声明一个受保护的方法\n     protected function swim()\n     {\n         echo 'swim<br/>\n     }\n     // 声明一个私有的方法\n     private function study()\n     {\n         echo 'study'\n     }\n     //不加关键字默认公有方法\n     function getFun()\n     {\n       $this->say();\n       $this->swim();\n       $this->study();\n     }\n   }\n   $people = new Person();\n   // 正常运行\n   $people->say();\n   // 产生错误\n   $people->swim();\n   // 产生错误\n   $people->study();\n   // 公有，受保护，私有都可以执行\n   $people->getFun(); \n\n   /**\n   * 子类\n   * Define Boy\n   */\n\n  class Boy extends Person\n  {\n    function getFun2 ()\n    {\n      $this->sayName();\n      $this->swim();\n      // 这行会产生一个错误\n      $this->study(); \n    }\n  }\n  $body = new Boy();\n  // 这行能被正常执行\n  $body ->sayName();\n  // 公有的和受保护的都可执行，但私有的不行\n  $body->getFun2(); \n ?>\n")])])]),t("h2",{attrs:{id:"魔术方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#魔术方法","aria-hidden":"true"}},[n._v("#")]),n._v(" 魔术方法")]),n._v(" "),t("ul",[t("li",[n._v("public __set ( string $name , mixed $value ) : void // 设置私有属性值的时候调用（protected private）")]),n._v(" "),t("li",[n._v("public __get ( string $name ) : mixed  // 获取私有属性值的时候调用")]),n._v(" "),t("li",[n._v("public __isset ( string $name ) : bool // 当判断一个私有成员属性是否被设置过时调用")]),n._v(" "),t("li",[n._v("public __unset ( string $name ) : void // 当销毁一个私有成员属性的时候调用")])]),n._v(" "),t("h2",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 构造函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(' <?php\n   class Person{\n     //通过构造函数为成员变量赋初始值\n     function __construct($name,$age){\n       $this->name = $name;\n       $this->age = $age;\n     }\n     public function say(){\n         echo "姓名".$this->name . "年龄".$this->age;\n     }\n   }\n   $xiaowang = new Person(\'xiaowang \',28);\n   $xiaowang->say(); // 姓名 xiaowang 年龄 28\n ?>\n')])])]),t("h2",{attrs:{id:"析构函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#析构函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 析构函数")]),n._v(" "),t("p",[t("strong",[n._v("析构函数 (destructor) 与构造函数相反，当对象结束其生命周期时，系统自动执行析构函数，常用场景例如连接数据库在__construct中,处理完数据断开连接在__destruct方法中")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" <?php\n   class Person{\n      function __construct($name,$age){\n        this->name = $name;\n        this->age = $age;\n      }\n      public function say(){\n         echo \"姓名\".$this->name . \"年龄\".$this->age;\n      }\n      function __destruct(){\n          $this->name = '';\n          return true;\n      }\n   }\n   $xiaowang = new Person('xiaowang',28);\n   var_dump($xiaowang);\n   echo \"<br/>\"\n   if($xiaowang -> __destruct){\n       echo '销毁成功';\n       var_dump($xiaowang);\n   }\n ?> \n")])])]),t("h2",{attrs:{id:"类的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的继承","aria-hidden":"true"}},[n._v("#")]),n._v(" 类的继承")]),n._v(" "),t("pre",[t("code",[n._v(" **PHP只支持单继承，一个子类只能有一个父类。不允许一个类直接继承多个类，但一个类可以被多个类继承**\n **可以有多层继承，即一个类可以继承某一个类的子类，如类B继承了类A,类C又继承了类B,那么类C也间接的继承了类A**\n")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Woman extends Person\n {\n     function __construct($name, $age)\n     {\n         parent::__construct($name, $age);//实现父级构造方法的方式parent::__construct\n     }\n     public function goOutAge()\n     {\n         parent::goOutAge(); //实现父级的普通方法重载\n         echo '<br/> myGoOutage<br/>';\n     }\n     public function haveExtends()\n     {\n         $this->sayName();\n         //$this->goOutAge();\n     }\n }\n $chengxuyuan = new Woman('程序媛', 18);\n $chengxuyuan->haveExtends();\n $chengxuyuan->goOutAge();\n")])])]),t("ul",[t("li",[n._v("类继承的应用")]),n._v(" "),t("li",[n._v("访问类型控制")]),n._v(" "),t("li",[n._v("子类中重载父类的方法"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" parent::handler();//实现重载父类的方法\n")])])])])]),n._v(" "),t("h2",{attrs:{id:"php中的抽象类-abstract-声明抽象类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#php中的抽象类-abstract-声明抽象类","aria-hidden":"true"}},[n._v("#")]),n._v(" PHP中的抽象类(abstract 声明抽象类)")]),n._v(" "),t("ul",[t("li",[n._v("抽象方法和抽象类，当类中有一个方法，没有方法体，也就是没有花括号，直接分号结束，像这种方法我们叫做抽象方法，必须使用关键字abstract定义。\n如"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" public abstrat function fun();\n")])])]),n._v("包含这种方法的类必须是抽象类也要使用关键字abstract加以声明。(即使用关键字abstract修饰的类为抽象类)")]),n._v(" "),t("li",[n._v("抽象类的特点:\n1.不能实例化，也就是不能new成对象\n2.若是想使用抽象类。就必须定义一个类去继承这个抽象类，并定义覆盖父类的抽象方法(实现抽象方法)")])]),n._v(" "),t("h2",{attrs:{id:"接口技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口技术","aria-hidden":"true"}},[n._v("#")]),n._v(" 接口技术")]),n._v(" "),t("ul",[t("li",[n._v("PHP与大多数面向对象编程语言一样，不支持多重继承，也就是说每个类只能继承一个父类。为了解决这个问题，PHP引入了接口，接口的思想是指定了一个实现了该接口的类必须实现的一系列函数。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" //定义格式\n interface 接口名称{\n     //常量成员 (使用const 关键字定义)\n     //抽象方法 (不需要使用abstract关键字)\n }\n //使用格式: class类名 implements 接口名1,接口名2{...}\n")])])]),t("h2",{attrs:{id:"接口和抽象类的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口和抽象类的区别","aria-hidden":"true"}},[n._v("#")]),n._v(" 接口和抽象类的区别")]),n._v(" "),t("ul",[t("li",[n._v("当关注一个事物的本质的时候，用抽象类，当关注一个操作的时候，用接口;")]),n._v(" "),t("li",[n._v("接口是对动作的抽象，表示这个对象能做什么，对类的局部行为进行抽象。")]),n._v(" "),t("li",[n._v("抽象类是对根源的抽象，表示这个类是什么，对类的整体进行抽象。对一类事物的抽象描述\n(比如，男人，女人这两个类,抽象类是人，说明，他们都是人，人可以吃东西，狗也可以吃东西，你可以把'吃东西'定义成一个接口，然后让这些类去实现它)")]),n._v(" "),t("li",[n._v("所以，在高级语言上，一个类只能继承一个类(抽象类)(不可能是生物同时是非生物)但可以实现多个接口(吃东西，走路)")]),n._v(" "),t("li",[n._v("具体区别:\n"),t("ol",[t("li",[n._v("接口是抽象类的变体，接口中所有的方法都是抽象的，而抽象类是声明方法的存在而不去实现它的类")]),n._v(" "),t("li",[n._v("接口可以多继承，抽象类不行")]),n._v(" "),t("li",[n._v("接口定义方法，不能实现，而抽象类可以实现部分方法。")]),n._v(" "),t("li",[n._v("接口总基本数据类型为static 而抽象类不是")]),n._v(" "),t("li",[n._v("接口中不能含有静态代码块及静态方法。而抽象类可以含有静态方法和静态代码块")])])])]),n._v(" "),t("h2",{attrs:{id:"常见关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见关键字","aria-hidden":"true"}},[n._v("#")]),n._v(" 常见关键字")]),n._v(" "),t("ul",[t("li",[n._v("final"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("只能修饰类和方法，不能使用final这个关键字修饰成员属性\n特性:\n1. 使用final关键字标识的类不能被继承\n2. 使用final关键字标识的方法不能被子类覆盖(重写),是最终版本\n目的:安全 没必要被继承或重写\n")])])])]),n._v(" "),t("li",[n._v("static关键字"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("静态修饰类成员属性和方法,类中静态属性方法不能实例化， 可以直接通过使用类名访问\n格式：类::$静态属性   类::静态方法\n在类的方法中。不能使用this引用静态变量、方法，用self引用\n格式：self::$静态属性  self::静态方法\n静态方法中不可以使用非静态的内容。就是不让使用$this.\n静态属性是共享的。也就是new很多对象也是共用一个属性\n")])])])]),n._v(" "),t("li",[n._v("单例设计模式"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("主要作用在保证面向对象编程设计中。一个类只有一个实例对象存在\n")])])])]),n._v(" "),t("li",[n._v("const关键字"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  常量 在PHP中定义常量使用define()函数,在类里面定义常量使用 'const' 这个关键字\n\n  const CONSTANT = 'constant value';//定义\n  echo self::CONSTANT;//类内部访问\n  echo className::CONSTANT;//类外部访问\n")])])])]),n._v(" "),t("li",[n._v("instanceof关键字\n"),t("strong",[n._v("检测当前对象实例是否属于某一个类或者这个类的子类")])])]),n._v(" "),t("h2",{attrs:{id:"自动加载类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动加载类","aria-hidden":"true"}},[n._v("#")]),n._v(" 自动加载类")]),n._v(" "),t("p",[t("strong",[n._v("PHP4中当new实例化一个不存在的类时，则自动调用此函数__autoload(),并将类名作为参数传入次函数。可以使用这个实现类的自动加载")])]),n._v(" "),t("p",[n._v("##PHP错误处理类")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("系统自带异常处理")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(' class Exception{\n   protected $message = "Unknown exception";//异常信息\n   protected $code = 0;   //用户自定义异常代码\n   protected $file; //发生异常的文件名\n   protected $line;\n   function __contract($message = null,$code =0);\n   final function getMessage();//返回异常的信息\n   final function getCode();//返回异常代码\n   final function getFile();//返回发生异常的文件名\n   final function getLine();//返回发生异常的代码行号\n   final function getTrace();//backtrace()数组\n   final function getTraceAsString();//已格式化成字符串的getTrace()信息\n   final __toString();//可输出的字符串\n }\n')])])])]),n._v(" "),t("li",[t("p",[n._v("自定义异常处理\ntry{}catch(e){}")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<?php\n  try{\n      //...\n  }catch(Exception $e){\n    echo '错误文件';\n    echo $e->getFile();\n    //...\n  }\n?>\n<?php\n//自定义异常类时要继承系统的异常处理类\n class myException extends Exception{\n  public function getAllInfo(){\n      return \"异常文件为:{$this->getFile()}\";\n  }\n\n }\n //捕捉时注意到类型约束为自己定义的异常处理类名\n try{\n    if($_GET['num']==5){\n        throw new Exception('这是一个自定义的错误');\n    } \n }catch(myException $e){\n     echo $e->getAllInfo();\n }\n?>\n")])])])]),n._v(" "),t("li",[t("p",[n._v("捕捉多个异常处理")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  class myException extends Exception{\n    public function getAllInfo(){\n        return $this->getMessage();\n    }\n   }\n\n try{\n     //捕捉多个异常处理要抛出多个异常对象，不能是由一个异常处理类实例化和对象\n      if($_GET['num']==1){\n          throw new Exception('user')\n      } elseif($_GET['num']==2){\n        throw new Exception('sys')\n      }\n      echo 'success';\n      //在捕捉时系统的异常处理分支要放到最后\n      //注意类型约束\n   }catch(myException $e){\n       echo $e->getAllInfo();\n   }catch(Exception $e){\n       echo $e->getMessage();\n   }\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);