(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{206:function(a,e,t){"use strict";t.r(e);var n=t(0),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"测试的核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试的核心概念","aria-hidden":"true"}},[a._v("#")]),a._v(" 测试的核心概念")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("单元测试")]),a._v(" "),t("ol",[t("li",[a._v("目的:单元测试能够让开发者明确知道代码结果")]),a._v(" "),t("li",[a._v("原则:单一职责、接口抽象、层次分离")]),a._v(" "),t("li",[a._v("断言库:保证最小单元是否正常运行检测方法")]),a._v(" "),t("li",[a._v("测试风格:测试驱动开发(Test_driven Development,TDD)、(Behavior Driven Development ,BDD)行为驱动开发均是敏捷开发方法论\nTDD:关注所有的功能是否被实现(每一个功能都必须有对应一个测试用例，suite配合test利用assert('aa'===name))\nBDD关注整体行为是否符合整体预期，编写的每一行代码都有目的提供一个全面测试用例集 should describe配合it利用自然语言expect(1).toEqueal   (fn())")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" 单元测试框架\n  better-assert (TDD断言库)\n  should.js(BDD断言库)\n  expect.js(BDD断言库)\n  chai.js(TDD BDD双模)\n  Jasmine.js(BDD断言库)\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  单元测试运行流程\n   before -> beforeEach -> it -> after ->afterEach \n   每一个测试用例通过describe进行设置\n   1.before 单个测试用例 (it)开始前\n   2.beforeEach 每一个测试用例开始前\n   3.it定义测试用例，并利用断言库进行设置chai如:expect(x).to.eaqual(true)\n   4 异步mocha 专业术语叫mock\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" 自动化单元测试\n karma 自动化runner 继承PhantomJs 无刷新\n npm install -g karma\n npm install karma-cli --save-dev\n npm install karma-chrome-launcher --save-dev\n npm install karma-phantomjs-launcher --save-dev\n npm install karma-mocha --save-dev\n npm install karma-chai\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" 报告和单测覆盖率检查\n npm install karma-coverage --save-dev\n coverageReporter:{\n     type:'html',\n     dir:'coverage/'\n }//配置代码覆盖测试率生成结果\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" 压力测试\n 1.对网络接口做压力测试需要检查的几个常用指标有吞吐率，响应时间和并发数，这些指标反映了服务器并发处理能力\n 2.PV网站当日访问人数UV独立访问人数。PV每天几十万甚至上百万就需要考虑压力测试。换算公式 QPS = PV/t ps:1000000/10*60*60=27.7(100万去请求集中在10小时，服务器美妙处理27.7个业务请求)\n 3.常用的压力测试工具是ab,siege,http_load\n 4.ab -c 100 -n 100 http://localhost:8001 每秒持续发出28个请求Request per second 表示服务器每秒请求处理请求书即为QPS\n Failed requests 表示此次请求实际的请求数 客户端向服务器端建立连接，服务器端处理请求。等待报文等\n")])])])]),a._v(" "),t("li",[t("p",[a._v("性能测试")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" 基准测试\n 1.面向切面编程AOP无侵入式统计\n 2.Banchmark基准测试方法，它并不是简单的统计执行多少次测试代码后对比时间，它对测试有着严密的抽样过程。执行多少次取决于采样到的数据是否能完成统计。根据统计次数计算方差\n")])])])]),a._v(" "),t("li",[t("p",[a._v("安全测试")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("安全测试\n 安全漏洞检查\n XSS\n SQL\n CSRF\n")])])])]),a._v(" "),t("li",[t("p",[a._v("功能测试")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" 用户真实性检查\n\n selenium-webdriver\n protractor selenium-standalone\n htt0://webdriver.io/WEBDRIVER/O\n 冒烟测试 SmokeTest 自由测试的一种。找到一个BUG开发修复。然后专门针对此BUG,优点节省时间防止build失败，缺点是覆盖率极低。\n 回归测试 修改一处对整体功能的测试。一般配合自动化测试\n\n\n JsLint  &&  JsHint\n 目的: 检测js代码标准\n 原因 js代码诡异，保证团队代码规范\n 搭配自动化任务化任务管理工具完善自动化测试grunt-jshint grunt-jslint\n\n\n Q&A\n")])])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);